// LLVM IR to TOSA IR Conversion
// Generated by Complete LLVM2TOSA Converter
// Supports all 68 LLVM instructions -> 66 TOSA operations

module {
func.func @test_sum_reduction() -> () {
  // Basic block: entry
  init_0 = tosa.const {value = dense<0> : tensor<1xf32>} : () -> tensor<1xf32>
  result_1 = tosa.add scalar_2, init_0 : (tensor<1xi32>, tensor<1xi32>) -> tensor<1xi32>
  %cond = tosa.equal scalar_3, scalar_4 : (tensor<1xi1>, tensor<1xi1>) -> tensor<1xi1>
  result_5 = tosa.add scalar_6, scalar_7 : (tensor<1xi32>, tensor<1xi32>) -> tensor<1xi32>
  // Basic block: exit
  %final_sum = tosa.add scalar_8, scalar_9 : (tensor<1xf32>, tensor<1xf32>) -> tensor<1xf32>
  // Basic block: loop.body
  // GEP: %elem_ptr = getelementptr inbounds float, float* %array, i32 %i
  // Load: %elem = load float, float* %elem_ptr
  %new_sum = tosa.add scalar_11, scalar_12 : (tensor<1xf32>, tensor<1xf32>) -> tensor<1xf32>
  result_13 = tosa.add scalar_14, scalar_15 : (tensor<1xi32>, tensor<1xi32>) -> tensor<1xi32>
  // Basic block: loop.header
  %i = tosa.add scalar_17, scalar_18 : (tensor<1xi32>, tensor<1xi32>) -> tensor<1xi32>
  %sum = tosa.add %new_sum, scalar_19 : (tensor<1xf32>, tensor<1xf32>) -> tensor<1xf32>
  %loop_cond = tosa.equal scalar_3, %i : (tensor<1xi1>, tensor<1xi1>) -> tensor<1xi1>
  result_20 = tosa.add scalar_21, scalar_22 : (tensor<1xi32>, tensor<1xi32>) -> tensor<1xi32>
}

func.func @test_max_reduction() -> () {
  // Basic block: entry
  // GEP: %first_ptr = getelementptr inbounds float, float* %array, i32 0
  // Load: %init_max = load float, float* %first_ptr
  %cond = tosa.equal scalar_3, scalar_23 : (tensor<1xi1>, tensor<1xi1>) -> tensor<1xi1>
  result_24 = tosa.add scalar_25, scalar_26 : (tensor<1xi32>, tensor<1xi32>) -> tensor<1xi32>
  // Basic block: exit
  %final_max = tosa.add scalar_27, scalar_28 : (tensor<1xf32>, tensor<1xf32>) -> tensor<1xf32>
  // Basic block: loop.body
  // GEP: %elem_ptr = getelementptr inbounds float, float* %array, i32 %i
  // Load: %elem = load float, float* %elem_ptr
  %cmp = tosa.equal scalar_30, scalar_31 : (tensor<1xi1>, tensor<1xi1>) -> tensor<1xi1>
  %new_max = tosa.select scalar_32, %cmp, scalar_33 : tensor<1xf32>
  result_34 = tosa.add %i, scalar_15 : (tensor<1xi32>, tensor<1xi32>) -> tensor<1xi32>
  // Basic block: loop.header
  %i = tosa.add %i, scalar_36 : (tensor<1xi32>, tensor<1xi32>) -> tensor<1xi32>
  %max_val = tosa.add %new_max, scalar_37 : (tensor<1xf32>, tensor<1xf32>) -> tensor<1xf32>
  %loop_cond = tosa.equal scalar_3, %i : (tensor<1xi1>, tensor<1xi1>) -> tensor<1xi1>
  result_38 = tosa.add scalar_39, scalar_40 : (tensor<1xi32>, tensor<1xi32>) -> tensor<1xi32>
}

}
